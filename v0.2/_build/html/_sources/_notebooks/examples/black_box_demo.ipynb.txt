{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Black-Box Uncertainty Quantification Demo"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Content\n",
    "1. [Introduction](#section1')\n",
    "2. [Set up LLM and Prompts](#section2')\n",
    "3. [Generate Responses and Confidence Scores](#section3')<br>\n",
    "4. [Performance Evaluation](#section4')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import warnings\n",
    "\n",
    "import numpy as np\n",
    "from sklearn.metrics import precision_score, recall_score, f1_score\n",
    "\n",
    "from uqlm.utils import load_example_dataset, math_postprocessor, plot_model_accuracies, Tuner\n",
    "from uqlm.quantifiers import BlackBoxUQ\n",
    "\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='section1'></a>\n",
    "## 1. Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "Black-box Uncertainty Quantification (UQ) methods treat the LLM as a black box and evaluate response consistency to estimate response-level confidence. This demo provides an illustration of how to use state-of-the-art black-box UQ methods with `uqlm`.\n",
    "\n",
    "**Pros:**\n",
    "\n",
    "*   ✅  **Universal Compatibility:** Works with any LLM.\n",
    "*   ✅  **Intuitive:** Easy to understand and implement.\n",
    "*   ✅  **No Internal Access Required:** Doesn't need token probabilities or model internals.\n",
    "\n",
    "**Cons:**\n",
    "\n",
    "*   ⚠️  **Higher Cost:** Requires multiple generations per prompt.\n",
    "*   ⚠️  **Slower:**  Multiple generations and comparison calculations increase latency.\n",
    "\n",
    "**Available Scorers:**\n",
    "\n",
    "*   Contradiction Probability ([Chen & Mueller, 2023](https://arxiv.org/abs/2308.16175); [Lin et al., 2025](https://arxiv.org/abs/2305.19187); [Manakul et al., 2023](https://arxiv.org/abs/2303.08896))\n",
    "*   Semantic Entropy ([Farquhar et al., 2024](https://www.nature.com/articles/s41586-024-07421-0); [Kuh et al., 2023](https://arxiv.org/pdf/2302.09664))\n",
    "*   Exact Match ([Cole et al., 2023](https://arxiv.org/abs/2305.14613); [Chen & Mueller, 2023](https://arxiv.org/abs/2308.16175))\n",
    "*   BERT-score ([Manakul et al., 2023](https://arxiv.org/abs/2303.08896); [Zheng et al., 2020](https://arxiv.org/abs/1904.09675))\n",
    "*   BLUERT-score ([Sellam et al., 2020](https://arxiv.org/abs/2004.04696))\n",
    "*   Cosine Similarity ([Shorinwa et al., 2024](https://arxiv.org/pdf/2412.05563); [HuggingFace](https://huggingface.co/sentence-transformers/all-MiniLM-L6-v2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='section2'></a>\n",
    "## 2. Set up LLM and Prompts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset - svamp...\n",
      "Processing dataset...\n",
      "Dataset ready!\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>question</th>\n",
       "      <th>answer</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>There are 87 oranges and 290 bananas in Philip...</td>\n",
       "      <td>145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Marco and his dad went strawberry picking. Mar...</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Edward spent $ 6 to buy 2 books each book cost...</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Frank was reading through his favorite book. T...</td>\n",
       "      <td>198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>There were 78 dollars in Olivia's wallet. She ...</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            question answer\n",
       "0  There are 87 oranges and 290 bananas in Philip...    145\n",
       "1  Marco and his dad went strawberry picking. Mar...     19\n",
       "2  Edward spent $ 6 to buy 2 books each book cost...      3\n",
       "3  Frank was reading through his favorite book. T...    198\n",
       "4  There were 78 dollars in Olivia's wallet. She ...     63"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load example dataset (SVAMP)\n",
    "svamp = (\n",
    "    load_example_dataset(\"svamp\")\n",
    "    .rename(columns={\"question_concat\": \"question\", \"Answer\": \"answer\"})[\n",
    "        [\"question\", \"answer\"]\n",
    "    ]\n",
    "    .head(75)\n",
    ")\n",
    "svamp.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define prompts\n",
    "MATH_INSTRUCTION = (\n",
    "    \"When you solve this math problem only return the answer with no additional text.\\n\"\n",
    ")\n",
    "prompts = [MATH_INSTRUCTION + prompt for prompt in svamp.question]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Instantiate BaseChatModel\n",
    "from langchain_google_vertexai import ChatVertexAI\n",
    "\n",
    "llm = ChatVertexAI(model=\"gemini-pro\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that although we use `ChatVertexAI` in this example, any [LangChain Chat Model](https://js.langchain.com/docs/integrations/chat/) may be used."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='section3'></a>\n",
    "## 3. Generate responses and confidence scores"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### `BlackBoxUQ()` - Class for computing token probability-based confidence scores on LLM responses for the provided prompts (hallucination detection).\n",
    "\n",
    "**Class Attributes:**\n",
    "- `llm` (**BaseChatModel, default=None**) A langchain llm (`BaseChatModel`). User is responsible for specifying temperature and other relevant parameters to the constructor of their `BaseChatModel` object.\n",
    "- `nli_scorer` - (**class_object, default=None**) A class object to compute the semantic similarity score using a natural language inference model. This object must have a `predict` method, which returns probability of contradiction for provided input. Default case, uses DeBERTA model trained on MNLI dataset.\n",
    "- `device` - (**str or torch.device input or torch.device object, default=\"cpu\"**) Specifies the device that classifiers use for prediction. Set to \"cuda\" for classifiers to be able to leverage the GPU.\n",
    "- `system_prompt` - (**str or None, default=\"You are a helpful assistant.\"**) Optional argument for user to provide custom system prompt\n",
    "- `max_calls_per_min` - (**int, default=None**) Specifies how many api calls to make per minute to avoid a rate limit error. By default, no limit is specified.\n",
    "- `use_n_param` (**bool, default=False**) Specifies whether to use `n` parameter for `BaseChatModel`. Not compatible with all `BaseChatModel` classes. If used, it speeds up the generation process substantially when `num_responses` is large.\n",
    "- `postprocessor` - (**f(str) -> str, default=None**) A user-defined function to postprocess responses.\n",
    "- `scorers` - (**subset of {'entropy_score', 'noncontradiction_score', 'match_score', 'bert_score', 'bleurt_score', 'cosine_score'}, default=None**) Specifies which black box (consistency) scorers to include. If None, defaults to [\"entropy_score\", \"noncontradiction_score\", \"match_score\", \"cosine_score\"]   \n",
    "\n",
    "**Class Methods:**\n",
    "1. `evaluate` - Generate responses and compute black-box (consistency-based) confidence scores on LLM responses for the provided prompts.\n",
    "\n",
    "    **Method Attributes:**\n",
    "    - `prompts` - (**list of str**) A list of input prompts for the model.\n",
    "    - `responses` - (**list of str, default=None**) A list of model responses for the prompts. If not provided, this method will generate responses for `self.llm`. \n",
    "    - `multiple_responses` - (**list of list of str, default=None**) A list of multiple model responses, each element (multiple_responses[i]) is a list of str, containing multiple model responses for prompts[i]. If not provided, this method will generate responses for `self.llm`.\n",
    "    - `mr_temperature` - (**float, default=1**) The `temperature` parameter for llm model to generate multiple responses\n",
    "    - `num_responses` - (**int, default=5**) The number of multiple responses used to compute observed consistency.\n",
    "    \n",
    "    **Returns:**\n",
    "        `UQResult` containing data (prompts, responses, and confidence scores) and metadata "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "\n",
    "device = torch.device(\"cuda\")  # use if GPU available\n",
    "# device = None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1741803952.647070   33403 fork_posix.cc:75] Other threads are currently calling into gRPC, skipping fork() handlers\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "Some weights of the model checkpoint at microsoft/deberta-large-mnli were not used when initializing DebertaForSequenceClassification: ['config']\n",
      "- This IS expected if you are initializing DebertaForSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n",
      "- This IS NOT expected if you are initializing DebertaForSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n"
     ]
    }
   ],
   "source": [
    "bbuq = BlackBoxUQ(\n",
    "    llm=llm,\n",
    "    max_calls_per_min=250,\n",
    "    device=device,\n",
    "    system_prompt=MATH_INSTRUCTION,\n",
    "    scorers=[\"entropy_score\", \"match_score\", \"cosine_score\"],\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating responses...\n",
      "Generating candidate responses...\n",
      "Computing confidence scores...\n"
     ]
    }
   ],
   "source": [
    "results = await bbuq.evaluate(\n",
    "    prompts=prompts,\n",
    "    num_responses=10,\n",
    "    # responses=responses # provide if responses already generated\n",
    "    # multiple_responses=multiple_responses # provide if candidate responses already generated\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>prompt</th>\n",
       "      <th>response</th>\n",
       "      <th>multiple_responses</th>\n",
       "      <th>match_score</th>\n",
       "      <th>cosine_score</th>\n",
       "      <th>entropy_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>When you solve this math problem only return t...</td>\n",
       "      <td>145</td>\n",
       "      <td>[145, 145, 145, 145, 145, 3, 145, 145, 145, 145]</td>\n",
       "      <td>0.9</td>\n",
       "      <td>0.972187</td>\n",
       "      <td>0.867698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>When you solve this math problem only return t...</td>\n",
       "      <td>19</td>\n",
       "      <td>[ 19 pounds., 19 pounds., 19 pounds , 19, 19, ...</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.920831</td>\n",
       "      <td>0.424396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>When you solve this math problem only return t...</td>\n",
       "      <td>$3</td>\n",
       "      <td>[$3.00, $3, $4, 2\\n, 3, $3.00, 2, $ 3, $3.00\\n...</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.853195</td>\n",
       "      <td>0.316378</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>When you solve this math problem only return t...</td>\n",
       "      <td>198</td>\n",
       "      <td>[198., 198, 198, 198, 198, 198, 198, 198, 198,...</td>\n",
       "      <td>0.9</td>\n",
       "      <td>0.998001</td>\n",
       "      <td>0.867698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>When you solve this math problem only return t...</td>\n",
       "      <td>63</td>\n",
       "      <td>[63, 63, 63, 63, 63, 63 dollars, 63 dollars, 6...</td>\n",
       "      <td>0.8</td>\n",
       "      <td>0.971171</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              prompt response  \\\n",
       "0  When you solve this math problem only return t...      145   \n",
       "1  When you solve this math problem only return t...       19   \n",
       "2  When you solve this math problem only return t...       $3   \n",
       "3  When you solve this math problem only return t...      198   \n",
       "4  When you solve this math problem only return t...       63   \n",
       "\n",
       "                                  multiple_responses  match_score  \\\n",
       "0   [145, 145, 145, 145, 145, 3, 145, 145, 145, 145]          0.9   \n",
       "1  [ 19 pounds., 19 pounds., 19 pounds , 19, 19, ...          0.5   \n",
       "2  [$3.00, $3, $4, 2\\n, 3, $3.00, 2, $ 3, $3.00\\n...          0.1   \n",
       "3  [198., 198, 198, 198, 198, 198, 198, 198, 198,...          0.9   \n",
       "4  [63, 63, 63, 63, 63, 63 dollars, 63 dollars, 6...          0.8   \n",
       "\n",
       "   cosine_score  entropy_score  \n",
       "0      0.972187       0.867698  \n",
       "1      0.920831       0.424396  \n",
       "2      0.853195       0.316378  \n",
       "3      0.998001       0.867698  \n",
       "4      0.971171       1.000000  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_df = results.to_df()\n",
    "result_df.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='section4'></a>\n",
    "## 4. Evaluate performance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>prompt</th>\n",
       "      <th>response</th>\n",
       "      <th>multiple_responses</th>\n",
       "      <th>match_score</th>\n",
       "      <th>cosine_score</th>\n",
       "      <th>entropy_score</th>\n",
       "      <th>answer</th>\n",
       "      <th>response_correct</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>When you solve this math problem only return t...</td>\n",
       "      <td>145</td>\n",
       "      <td>[145, 145, 145, 145, 145, 3, 145, 145, 145, 145]</td>\n",
       "      <td>0.9</td>\n",
       "      <td>0.972187</td>\n",
       "      <td>0.867698</td>\n",
       "      <td>145</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>When you solve this math problem only return t...</td>\n",
       "      <td>19</td>\n",
       "      <td>[ 19 pounds., 19 pounds., 19 pounds , 19, 19, ...</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.920831</td>\n",
       "      <td>0.424396</td>\n",
       "      <td>19</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>When you solve this math problem only return t...</td>\n",
       "      <td>$3</td>\n",
       "      <td>[$3.00, $3, $4, 2\\n, 3, $3.00, 2, $ 3, $3.00\\n...</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.853195</td>\n",
       "      <td>0.316378</td>\n",
       "      <td>3</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>When you solve this math problem only return t...</td>\n",
       "      <td>198</td>\n",
       "      <td>[198., 198, 198, 198, 198, 198, 198, 198, 198,...</td>\n",
       "      <td>0.9</td>\n",
       "      <td>0.998001</td>\n",
       "      <td>0.867698</td>\n",
       "      <td>198</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>When you solve this math problem only return t...</td>\n",
       "      <td>63</td>\n",
       "      <td>[63, 63, 63, 63, 63, 63 dollars, 63 dollars, 6...</td>\n",
       "      <td>0.8</td>\n",
       "      <td>0.971171</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>63</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              prompt response  \\\n",
       "0  When you solve this math problem only return t...      145   \n",
       "1  When you solve this math problem only return t...       19   \n",
       "2  When you solve this math problem only return t...       $3   \n",
       "3  When you solve this math problem only return t...      198   \n",
       "4  When you solve this math problem only return t...       63   \n",
       "\n",
       "                                  multiple_responses  match_score  \\\n",
       "0   [145, 145, 145, 145, 145, 3, 145, 145, 145, 145]          0.9   \n",
       "1  [ 19 pounds., 19 pounds., 19 pounds , 19, 19, ...          0.5   \n",
       "2  [$3.00, $3, $4, 2\\n, 3, $3.00, 2, $ 3, $3.00\\n...          0.1   \n",
       "3  [198., 198, 198, 198, 198, 198, 198, 198, 198,...          0.9   \n",
       "4  [63, 63, 63, 63, 63, 63 dollars, 63 dollars, 6...          0.8   \n",
       "\n",
       "   cosine_score  entropy_score answer  response_correct  \n",
       "0      0.972187       0.867698    145              True  \n",
       "1      0.920831       0.424396     19              True  \n",
       "2      0.853195       0.316378      3              True  \n",
       "3      0.998001       0.867698    198              True  \n",
       "4      0.971171       1.000000     63              True  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Populate correct answers and grade responses\n",
    "result_df[\"answer\"] = svamp.answer\n",
    "result_df[\"response_correct\"] = [\n",
    "    math_postprocessor(r) == a for r, a in zip(result_df[\"response\"], svamp[\"answer\"])\n",
    "]\n",
    "result_df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Baseline LLM accuracy: 0.7333333333333333\n"
     ]
    }
   ],
   "source": [
    "print(f\"\"\"Baseline LLM accuracy: {np.mean(result_df[\"response_correct\"])}\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next we will plot filtered LLM accuracy at various confidence score thresholds. The idea is to measure the LLM's performance when we consider responses with confidence scores above a given threshold."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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77//Ht27d0ft2rUxbtw4dO/eHatWrVKoZ2BgADs7O/mjcuXKpdEcIiIiKiNES4AyMzNx7do1dO7c+W0wenro3LkzLl68qPScjIyMPBufmZqa5unhCQ8Ph4ODA2rXro3BgwcjOjpa8w0gIiKiMku0BOj58+fIycmBra2tQrmtrS3i4uKUnuPp6Ql/f3+Eh4dDKpXi1KlTOHjwIGJjY+V1PDw8EBQUhODgYPz000+IiopCmzZtkJKSkm8sGRkZSE5OVngQERFR+VWmFkL84YcfULduXdSvXx9GRkaYOHEivL29oaf3thndunXDF198ATc3N3h6euL48eN49eoVfvnll3yv6+fnB2tra/nD0dGxNJpDREREIhEtAapcuTL09fURHx+vUB4fH5/v/f1VqlTB4cOHkZaWhsePH+PevXuwsLBA7dq1830fGxsbuLi4ICIiIt86M2fORFJSkvzx5MmTojWKiIiIygTREiAjIyM0bdoUISEh8jKpVIqQkBC0aNGiwHNNTExQrVo1ZGdn48CBA+jZs2e+dVNTUxEZGQl7e/t86xgbG8PKykrhQUREROWXqENgPj4+2LRpE7Zt24a7d+9i3LhxSEtLg7e3NwBg2LBhmDlzprz+pUuXcPDgQTx8+BBnz55F165dIZVKMW3aNHmdqVOn4syZM3j06BEuXLiA3r17Q19fHwMHDiz19hEREZF2EnUhxP79+yMhIQFz585FXFwcGjdujODgYPnE6OjoaIX5Penp6Zg9ezYePnwICwsLdO/eHTt27ICNjY28TkxMDAYOHIjExERUqVIFrVu3xt9//40qVaqUdvOIiIhIS0kETe0rX44kJyfD2toaSUlJHA4jIiIqI9T5/V2m7gIjIiIi0gQmQERERKRzmAARERGRzmECRERERDqHCRARERHpHCZAREREpHOYABEREZHOYQJEREREOocJEBEREekcJkBERESkc5gAERERkc5hAkREREQ6hwkQERER6RwmQERERKRzmAARERGRzmECRERERDqHCRARERHpHCZAREREpHOYABEREZHOYQJEREREOocJEBEREekcJkBERESkc5gAERERkc5hAkREREQ6hwkQERER6RwmQERERKRzmAARERGRzmECRERERDrHQOwAiIiINCk8HEhJyVtuaQnUrVv68RRVeWmHtmICRERE5UZ4OODikv/x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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for scorer in [\"entropy\", \"match\", \"cosine\"]:\n",
    "    confidence_score = f\"{scorer}_score\"\n",
    "    plot_model_accuracies(\n",
    "        scores=result_df[confidence_score],\n",
    "        correct_indicators=result_df.response_correct,\n",
    "        title=f\"LLM Accuracy by {scorer} Score Threshold\",\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lastly, we will compute the optimal threshold for binarizing confidence scores, using F1-score as the objective. Using this threshold, we can compute precision, recall, and F1-score for black box scorer predictions of whether responses are correct."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "entropy score F1-optimal threshold: 0.22\n",
      " \n",
      "entropy score precision: 0.7971014492753623\n",
      "entropy score recall: 1.0\n",
      "entropy score f1-score: 0.8870967741935484\n",
      " \n",
      " \n",
      "match score F1-optimal threshold: 0.0\n",
      " \n",
      "match score precision: 0.7534246575342466\n",
      "match score recall: 1.0\n",
      "match score f1-score: 0.859375\n",
      " \n",
      " \n",
      "cosine score F1-optimal threshold: 0.8\n",
      " \n",
      "cosine score precision: 0.7746478873239436\n",
      "cosine score recall: 1.0\n",
      "cosine score f1-score: 0.873015873015873\n",
      " \n",
      " \n"
     ]
    }
   ],
   "source": [
    "# instantiate UQLM tuner object for threshold selection\n",
    "t = Tuner()\n",
    "\n",
    "correct_indicators = (\n",
    "    result_df.response_correct\n",
    ") * 1  # Whether responses is actually correct\n",
    "for scorer in [\"entropy\", \"match\", \"cosine\"]:\n",
    "    confidence_score = f\"{scorer}_score\"\n",
    "    y_scores = result_df[confidence_score]  # confidence score\n",
    "\n",
    "    # Solve for threshold that maximizes F1-score\n",
    "    best_threshold = t.tune_threshold(\n",
    "        y_scores=y_scores,\n",
    "        correct_indicators=correct_indicators,\n",
    "        thresh_objective=\"fbeta_score\",\n",
    "    )\n",
    "    y_pred = [\n",
    "        (s > best_threshold) * 1 for s in y_scores\n",
    "    ]  # predicts whether response is correct based on confidence score\n",
    "    print(f\"{scorer} score F1-optimal threshold: {best_threshold}\")\n",
    "    print(\" \")\n",
    "\n",
    "    # evaluate precision, recall, and f1-score of predictions of correctness\n",
    "    print(\n",
    "        f\"{scorer} score precision: {precision_score(y_true=correct_indicators, y_pred=y_pred)}\"\n",
    "    )\n",
    "    print(\n",
    "        f\"{scorer} score recall: {recall_score(y_true=correct_indicators, y_pred=y_pred)}\"\n",
    "    )\n",
    "    print(\n",
    "        f\"{scorer} score f1-score: {f1_score(y_true=correct_indicators, y_pred=y_pred)}\"\n",
    "    )\n",
    "    print(\" \")\n",
    "    print(\" \")"
   ]
  }
 ],
 "metadata": {
  "environment": {
   "kernel": "uqlm",
   "name": "workbench-notebooks.m126",
   "type": "gcloud",
   "uri": "us-docker.pkg.dev/deeplearning-platform-release/gcr.io/workbench-notebooks:m126"
  },
  "kernelspec": {
   "display_name": "uqlm",
   "language": "python",
   "name": "uqlm"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.21"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
